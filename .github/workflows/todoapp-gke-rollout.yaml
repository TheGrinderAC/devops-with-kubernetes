# A CI/CD pipeline using GitHub Actions to build and push container images, and update manifests for GitOps-based deployment (no direct push to GKE).

name: Release Todo Application

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
    paths:
      - "todo app/**"

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: my-repository
  IMAGE: todo-app
  BRANCH: ${{ github.ref_name }}

# PROJECT_ID: My Google Cloud project ID (from secrets)
# REGISTRY: Artifact Registry location(can be found in artifact registry setup instruction)
# REPOSITORY: Name of your Docker repository
# IMAGE: Name of your application image(my choice: This can be any name I want)
# BRANCH: Current git branch name

jobs:
  build-publish-gitops:
    name: Build, Publish, and Update Manifests (GitOps)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Google Cloud Authentication
      - name: GCP Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GKE_SA_KEY }}"

      # Step 3: Set up Google Cloud SDK
      - name: "Set up Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2

      # Step 4: Configure Docker to use gcloud as credential helper
      - name: Configure Docker
        run: gcloud --quiet auth configure-docker us-central1-docker.pkg.dev

      # Step 5: Form the image name with registry path
      - name: "Form the image name"
        run: echo "IMAGE_TAG=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV

      # Step 6: Build the Docker image
      - name: Build
        run: docker build --tag $IMAGE_TAG "todo app"

      # Step 7: Push the image to Artifact Registry
      - name: Publish
        run: docker push $IMAGE_TAG

      # Step 8: Set up Kustomize
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      # updated at (ex 4.8. The project, step 24)
      # using gitops instade of pushing directly to cluster(only doing for the main(project namespace), as it is enough for this excercise)
      - name: Update kustomization.yaml with new image
        run: |
          cd "todo app"
          kustomize edit set image todo-app=$IMAGE_TAG

      # Step 10: Commit kustomization.yaml to GitHub (GitOps)
      - name: Commit kustomization.yaml to GitHub
        uses: EndBug/add-and-commit@v9
        with:
          add: "kustomization.yaml"
          message: "New version released todo_app:${{ env.IMAGE_TAG }}"
          cwd: "./todo app"
          default_author: github_actions
