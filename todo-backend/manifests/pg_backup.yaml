apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-backup-cron
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: pg-backup
              image: postgres:alpine
              command:
                - /bin/sh
                - -c
                - |
                  set -e

                  # Install gsutil
                  apk add --no-cache python3 py3-pip curl
                  pip3 install --break-system-packages gsutil

                  # Create backup
                  BACKUP_FILE="backup-$(date +%Y-%m-%d-%H-%M-%S).sql.gz"
                  echo "Creating backup: $BACKUP_FILE"

                  pg_dump -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" | gzip > /tmp/$BACKUP_FILE

                  # Upload to GCS
                  echo "Uploading to GCS..."
                  gsutil cp /tmp/$BACKUP_FILE gs://$GCS_BUCKET/

                  # Cleanup old backups (keep 30 days)
                  echo "Cleaning up old backups..."
                  gsutil ls gs://$GCS_BUCKET/backup-*.sql.gz | \
                    grep -E "backup-[0-9]{4}-[0-9]{2}-[0-9]{2}" | \
                    while read file; do
                      file_date=$(echo "$file" | sed 's/.*backup-\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\).*/\1/')
                      if [ $(date -d "$file_date" +%s) -lt $(date -d "30 days ago" +%s) ]; then
                        echo "Deleting: $file"
                        gsutil rm "$file"
                      fi
                    done

                  echo "Backup completed successfully"
              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secret
                      key: PGPASSWORD
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: /secrets/gcs/key.json
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secret
                      key: POSTGRES_HOST
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secret
                      key: POSTGRES_USER
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secret
                      key: POSTGRES_DB
                - name: GCS_BUCKET
                  value: "my-unique-postgres-backup-bucket"
              volumeMounts:
                - name: gcs-secret
                  mountPath: "/secrets/gcs"
                  readOnly: true
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
          volumes:
            - name: gcs-secret
              secret:
                secretName: gcs-secret
          restartPolicy: OnFailure
